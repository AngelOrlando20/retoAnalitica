import random
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def distancia(p1, p2):
    return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** (0.5)


def cercanos(puntos, centros, k: int):
    # Se llena una k lista con listas vacias.
    clusters = [] # K listas vac√≠as.
    for _ in range(k):
        clusters.append([])
    # Se encuentra el centro mas cercano a cada punto y se agrega a cada cluster.
    for punto in puntos:
        near_center = 0
        for i_center in range(1, k):
            center = centros[i_center]
            nearest_center = centros[near_center]
            if (distancia(nearest_center, punto) < distancia(center, punto)):
                near_center = i_center
        clusters[near_center].append(punto)
    return clusters


def centros(clusters, k: int):
    clusters_avg = []
    for cluster in clusters:
        xp = 0.0; yp = 0.0
        for point in cluster:
            (xi, yi) = point
            xp += xi; yp += yi
        avg = [xp / k, yp / k]
        clusters_avg.append(avg)
    return clusters_avg

def kmeans(puntos, k = 3, iter_n = 100):
    # Se obtienen k puntos aleatorios.
    k_indexes = []
    for _ in range(k):
        index = random.randint(0, len(puntos) - 1)
        while index in k_indexes:
            index = random.randint(0, len(puntos) - 1)
        k_indexes.append(index)
    
    # Centros.
    centross = []
    for i in k_indexes:
        centross.append(puntos[i])

    # Se actualizan estos centros 100 veces.
    clusters = cercanos(puntos, centross, k)
    centros_avg = centros(clusters, k)
    for i, n_centro in enumerate(centros_avg):
        centross[i] = n_centro

    for _ in range(iter_n - 1):
        clusters = cercanos(puntos, centross, k)
        centros_avg = centros(clusters, k)
        for i, n_centro in enumerate(centros_avg):
            centross[i] = n_centro
    return (centross, clusters)


df = pd.read_csv("./covid19_tweets.csv")

var = []
for i in range(len(df['user_followers'])):
  var.append([df["user_followers"][i], df["user_friends"][i]])

points = np.array(var)
(centroides, clusters) = kmeans(points, k = 3, iter_n=100)

for p in clusters[0]:
    print(p)

plt.plot( [p[0] for p in clusters[0]], [p[1] for p in clusters[0]], 'r.', label='cluster 1')
plt.plot( [p[0] for p in clusters[1]], [p[1] for p in clusters[1]], 'b.', label='cluster 2')
plt.plot( [p[0] for p in clusters[2]], [p[1] for p in clusters[2]], 'g.', label='cluster 3')

plt.plot([p[0] for p in centroides], [p[1] for p in centroides],'mo',markersize=8, label='centroides')

plt.legend(loc='best')
plt.show()
